/* Configuration source file for an SSL server */

import com.tymeac.jini.base.JiniServerPermission;
import com.sun.jini.config.KeyStores;  
import java.util.Collections;           
import java.security.Permission;
import javax.security.auth.login.LoginContext;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;
import net.jini.discovery.LookupDiscovery;
import net.jini.security.*;
import net.jini.jeri.*;
import net.jini.jeri.ssl.*;
import net.jini.jrmp.JrmpExporter;             

com.tymeac.TymeacServer {

  /* parameters for activated class  */
  
  /* name of the application class to launch */
  applProgram = new String("com.tymeac.jini.base.JiniTymeacActivationImpl");

  /* physical location or codepath YOU MUST EDIT THIS */
  location = new String("file://c:${/}Documents%20and%20Settings${/}eharned${/}workspace${/}TymeacSE${/}com${/}tymeac${/}jini${/}base");

  /* -D properties for starting tymeac YOU MUST EDIT THIS */
  properties  = new String[] 
        {
          "java.security.manager", 
            "",
          "java.security.policy",
            "c:${/}Security${/}policy.all",                           
          "java.security.auth.login.config",
            "config${/}tymeac-jini-ssl-server.login",
          "java.security.properties", 
            "config${/}dynamic-policy.security-properties",
          "javax.net.ssl.trustStore",
            "config${/}tymeac.truststore"
          };         
                            
  /* what would be on the command line after the class to start */                          
  options = new String[] { "-s",
				   "-config",
                           "config${/}tymeac-ssl-server.config",
                           "com.tymeac.TymeacServer"  };   
    
  /*  login UN-COMMENT TO USE SECURITY  */
/*  loginContext = new LoginContext("com.tymeac.TymeacServer");   */

    /* Public Key Certificates */
    private static users = 
        KeyStores.getKeyStore("file:config/tymeac.truststore", null); 
                           
    private static server = 
        KeyStores.getX500Principal("tymeacserver", users); 

    private static reggie = 
        KeyStores.getX500Principal("tymeacreggie", users);
        
    private static phoenix = 
        KeyStores.getX500Principal("tymeacphoenix", users);        

    private static reggieUser = Collections.singleton(
        KeyStores.getX500Principal("tymeacreggie", users));
        
     private static phoenixUser = Collections.singleton(
        KeyStores.getX500Principal("tymeacphoenix", users));        
  
    private static serverUser = Collections.singleton(
        KeyStores.getX500Principal("tymeacserver", users));
         
    /* use both groups */
    private groups = new String[] { "TymeacServer", "TymeacServerFrontEnd" };
    discoveryManager = new LookupDiscovery(groups, this);
    
    /* exporter for myself */
    exporter = new JrmpExporter();
                                                                

}//end com.tymeac.TymeacServer

/* Configuration block for the lookup discovery utility */
net.jini.discovery.LookupDiscovery {

    private serviceLookupConstraints = 
              new BasicMethodConstraints( 
                  new InvocationConstraints( 
                      new InvocationConstraint[]{ 
                          Integrity.NO,            
                          ClientAuthentication.NO, 
                          ServerAuthentication.NO,                             
                          new ServerMinPrincipal(
                              com.tymeac.TymeacServer.reggieUser)
                      },
                  null));

  static registrarPreparer = 
      new BasicProxyPreparer(); 

}//end net.jini.discovery.LookupDiscovery

/* Configuration block for the join manager */
net.jini.lookup.JoinManager {

    static registrarPreparer    = 
  net.jini.discovery.LookupDiscovery.registrarPreparer;
  
    static registrationPreparer = 
  net.jini.discovery.LookupDiscovery.registrarPreparer;
  
    static serviceLeasePreparer = 
  net.jini.discovery.LookupDiscovery.registrarPreparer;

}//end net.jini.lookup.JoinManager

