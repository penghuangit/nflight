/* Configuration source file for an SSL server */

import com.tymeac.jini.base.JiniServerPermission;
import com.sun.jini.config.KeyStores;

import java.util.Collections;

import java.security.Permission;
import javax.security.auth.login.LoginContext;

import net.jini.constraint.BasicMethodConstraints;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;
import net.jini.discovery.LookupDiscovery;
import net.jini.security.*;
import net.jini.jeri.*;
import net.jini.jeri.ssl.*;

com.tymeac.TymeacServer {
    
  /*  login   */
 /* loginContext = new LoginContext("com.tymeac.TymeacServer");  */

    /* Public Key Certificates */
    private static users = 
        KeyStores.getKeyStore("file:config/tymeac.truststore", null); 
                           
    private static server = 
  KeyStores.getX500Principal("tymeacserver", users); 

    private static reggie = 
  KeyStores.getX500Principal("tymeacreggie", users);

    private static reggieUser = Collections.singleton(
  KeyStores.getX500Principal("tymeacreggie", users));
  
    private static serverUser = Collections.singleton(
  KeyStores.getX500Principal("tymeacserver", users));

    /* Exporter for the server proxy */
    exporter =
          /* Use secure exporter */
          new BasicJeriExporter(
              /* Use SSL transport */
              SslServerEndpoint.getInstance(0),
              /* Support ProxyTrust */
              new ProxyTrustILFactory(
                  /* Require integrity for all methods */
                  new BasicMethodConstraints(
                      new InvocationConstraints(Integrity.YES, null)),
                  /* Require ServerPermission */
                  com.tymeac.jini.base.JiniServerPermission.class));

    private groups = new String[] { "TymeacServer" };
    discoveryManager = new LookupDiscovery(groups, this);

}//end com.tymeac.TymeacServer

/* Configuration block for the lookup discovery utility */
net.jini.discovery.LookupDiscovery {

    private serviceLookupConstraints = 
              new BasicMethodConstraints( 
                  new InvocationConstraints( 
                      new InvocationConstraint[]{ 
                          Integrity.YES,            
                          ClientAuthentication.YES, 
                          ServerAuthentication.YES,                             
                          new ServerMinPrincipal(
                              com.tymeac.TymeacServer.reggieUser)
                      },
                  null));

  static registrarPreparer = 
      new BasicProxyPreparer(
          
            false,
        /*  true, */
          serviceLookupConstraints,
          new Permission[] { 
              new AuthenticationPermission(
                  com.tymeac.TymeacServer.serverUser,
                  com.tymeac.TymeacServer.reggieUser,
                  "connect, accept" ) 
          }
      );

}//end net.jini.discovery.LookupDiscovery

/* Configuration block for the join manager */
net.jini.lookup.JoinManager {

    static registrarPreparer    = 
  net.jini.discovery.LookupDiscovery.registrarPreparer;
  
    static registrationPreparer = 
  net.jini.discovery.LookupDiscovery.registrarPreparer;
  
    static serviceLeasePreparer = 
  net.jini.discovery.LookupDiscovery.registrarPreparer;

}//end net.jini.lookup.JoinManager

