// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.tymeac.base;

import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.ServantObject;


public class _InterruptionReady_Stub extends Stub implements InterruptionReady {
    
    private static final String[] _type_ids = {
        "RMI:com.tymeac.base.InterruptionReady:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public void ready(CancelParm arg0) throws java.rmi.RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("ready", true);
                    out.write_value(arg0,CancelParm.class);
                    _invoke(out);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    ready(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("ready",InterruptionReady.class);
            if (so == null) {
                ready(arg0);
                return ;
            }
            try {
                CancelParm arg0Copy = (CancelParm) Util.copyObject(arg0,_orb());
                ((InterruptionReady)so.servant).ready(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
}
