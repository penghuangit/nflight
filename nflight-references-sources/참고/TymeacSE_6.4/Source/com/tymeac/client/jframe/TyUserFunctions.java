package com.tymeac.client.jframe;

/* 
 * Copyright (c) 1998 - 2004 Cooperative Software Systems, Inc. 
 *
 * The contents of this file are subject to the Common Public License   
 * ("License"). You may not use this file except in compliance with
 * the License. A copy of the License is part of this distribution and
 * is also available at:
 * http://www.opensource.org/licenses/cpl.php
 */

import java.awt.*;
import javax.swing.*;
import java.util.*;
/**
 * The Tymeac User Queues display frame.
 */
public class TyUserFunctions extends javax.swing.JFrame
{
  private static final long serialVersionUID = 1L;

  // Used by addNotify
  boolean frameSizeAdjusted = false;

  //{{DECLARE_CONTROLS
	javax.swing.JTextField FunctionText = new javax.swing.JTextField();
	javax.swing.JButton ImportButton = new javax.swing.JButton();
	javax.swing.JButton DeleteButton = new javax.swing.JButton();
	javax.swing.JButton AddButton = new javax.swing.JButton();
	javax.swing.JButton RemoveButton = new javax.swing.JButton();
	javax.swing.JButton FinishButton = new javax.swing.JButton();
	javax.swing.JLabel FunctionLabel = new javax.swing.JLabel();
	javax.swing.JLabel OALabel = new javax.swing.JLabel();
	javax.swing.JTextField OAText = new javax.swing.JTextField();
	javax.swing.JLabel AddLabel = new javax.swing.JLabel();
	javax.swing.JTextField AddText = new javax.swing.JTextField();
	javax.swing.JLabel ListLabel = new javax.swing.JLabel();
	javax.swing.JScrollPane ListScrollPane = new javax.swing.JScrollPane();
	javax.swing.JList TheList = new javax.swing.JList();
	javax.swing.JLabel Msg = new javax.swing.JLabel();
	javax.swing.JMenuBar JMenuBar1 = new javax.swing.JMenuBar();
	javax.swing.JMenu fileMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem exitItem = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator1 = new javax.swing.JSeparator();
	javax.swing.JMenu helpMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem Help = new javax.swing.JMenuItem();
	javax.swing.JMenuItem about = new javax.swing.JMenuItem();
	java.awt.FileDialog ReadJavaFile = new java.awt.FileDialog(this);
	java.awt.FileDialog SaveJavaFile = new java.awt.FileDialog(this);
	//}}

  TyUserFuncMaintBean TyUserFuncMaintBean21 = new TyUserFuncMaintBean();  
  String ty_dir = null;  

  class SymWindow extends java.awt.event.WindowAdapter
  {
    public void windowClosing(java.awt.event.WindowEvent event)
    {
      Object object = event.getSource();
      if (object == TyUserFunctions.this)
        TyUserFunctions_windowClosing(event);
    }
  }

  class SymAction implements java.awt.event.ActionListener
  {
    public void actionPerformed(java.awt.event.ActionEvent event)
    { 
      Object object = event.getSource();
      if (object == exitItem)
        exitItem_actionPerformed(event);
      else if (object == Help)
        Help_actionPerformed(event);
      else  if (object == about)
        about_actionPerformed(event);
      else if (object == AddButton)
        AddButton_actionPerformed(event);
      else if (object == RemoveButton)
        RemoveButton_actionPerformed(event);
      else if (object == ImportButton)
        ImportButton_actionPerformed(event);
      else if (object == DeleteButton)
        DeleteButton_actionPerformed(event);
      else if (object == FinishButton)
        FinishButton_actionPerformed(event);       
    }
  }

  class SymListSelection implements javax.swing.event.ListSelectionListener
  {
    public void valueChanged(javax.swing.event.ListSelectionEvent event)
    {
      Object object = event.getSource();
      if (object == TheList)
        TheList_valueChanged(event);
    }
  }

	static java.util.ResourceBundle tyUserFunctionsBundle = java.util.ResourceBundle.getBundle("com.tymeac.client.jframe.TyUserFunctionsBundle");
  public TyUserFunctions()
  {
    // This code is automatically generated by Visual Cafe when you add
    // components to the visual environment. It instantiates and initializes
    // the components. To modify the code, only use code syntax that matches
    // what Visual Cafe can generate, or Visual Cafe may be unable to back
    // parse your Java file into its visual environment.
    //{{INIT_CONTROLS
    setJMenuBar(JMenuBar1);
    setTitle(tyUserFunctionsBundle.getString("TyUserFunctions_title"));
    setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
    getContentPane().setLayout(null);
    setSize(600,420);
    setVisible(false);
		FunctionText.setText(tyUserFunctionsBundle.getString("FunctionText_text"));
//    FunctionText.setNextFocusableComponent(OAText);
    FunctionText.setToolTipText(tyUserFunctionsBundle.getString("FunctionText_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("FunctionText_toolTipText") : null);
    getContentPane().add(FunctionText);
    FunctionText.setBounds(44,30,200,34);
    //$$ JMenuBar1.move(180,432);
    fileMenu.setText(tyUserFunctionsBundle.getString("fileMenu_text"));
    fileMenu.setActionCommand(tyUserFunctionsBundle.getString("fileMenu_actionCommand"));
		fileMenu.setToolTipText(tyUserFunctionsBundle.getString("fileMenu_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("fileMenu_toolTipText") : null);
    fileMenu.setMnemonic((int)'F');
    JMenuBar1.add(fileMenu);
    
    fileMenu.add(JSeparator1);
    
    exitItem.setText(tyUserFunctionsBundle.getString("exitItem_text"));
    exitItem.setActionCommand(tyUserFunctionsBundle.getString("exitItem_actionCommand"));
		exitItem.setToolTipText(tyUserFunctionsBundle.getString("exitItem_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("exitItem_toolTipText") : null);
    exitItem.setMnemonic((int)'X');
    fileMenu.add(exitItem);
		JSeparator1.setToolTipText(tyUserFunctionsBundle.getString("JSeparator1_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("JSeparator1_toolTipText") : null);
    
    helpMenu.setText(tyUserFunctionsBundle.getString("helpMenu_text"));
    helpMenu.setActionCommand(tyUserFunctionsBundle.getString("helpMenu_actionCommand"));
		helpMenu.setToolTipText(tyUserFunctionsBundle.getString("helpMenu_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("helpMenu_toolTipText") : null);
    helpMenu.setMnemonic((int)'H');
    JMenuBar1.add(helpMenu);
    
    fileMenu.add(JSeparator1);
       
    Help.setText(tyUserFunctionsBundle.getString("Help_text"));
    Help.setActionCommand(tyUserFunctionsBundle.getString("Help_actionCommand"));
		Help.setToolTipText(tyUserFunctionsBundle.getString("Help_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("Help_toolTipText") : null);
    Help.setMnemonic((int)'D');
    helpMenu.add(Help);
    
    fileMenu.add(JSeparator1);
    
    about.setText(tyUserFunctionsBundle.getString("about_text"));
    about.setActionCommand(tyUserFunctionsBundle.getString("about_actionCommand"));
		about.setToolTipText(tyUserFunctionsBundle.getString("about_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("about_toolTipText") : null);
    about.setMnemonic((int)'A');
    helpMenu.add(about); 
    ImportButton.setText(tyUserFunctionsBundle.getString("ImportButton_text"));
    ImportButton.setActionCommand(tyUserFunctionsBundle.getString("ImportButton_actionCommand"));
    ImportButton.setToolTipText(tyUserFunctionsBundle.getString("ImportButton_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("ImportButton_toolTipText") : null);
    ImportButton.setFocusPainted(false);
    getContentPane().add(ImportButton);
    ImportButton.setBounds(295,30,80,35);
    DeleteButton.setText(tyUserFunctionsBundle.getString("DeleteButton_text"));
    DeleteButton.setActionCommand(tyUserFunctionsBundle.getString("DeleteButton_actionCommand"));
    DeleteButton.setToolTipText(tyUserFunctionsBundle.getString("DeleteButton_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("DeleteButton_toolTipText") : null);
    getContentPane().add(DeleteButton);
    DeleteButton.setBounds(504,30,80,34);
    AddButton.setText(tyUserFunctionsBundle.getString("AddButton_text"));
    AddButton.setActionCommand(tyUserFunctionsBundle.getString("AddButton_actionCommand"));
    AddButton.setToolTipText(tyUserFunctionsBundle.getString("AddButton_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("AddButton_toolTipText") : null);
    getContentPane().add(AddButton);
    AddButton.setBounds(504,190,80,34);
    RemoveButton.setText(tyUserFunctionsBundle.getString("RemoveButton_text"));
    RemoveButton.setActionCommand(tyUserFunctionsBundle.getString("RemoveButton_actionCommand"));
    RemoveButton.setToolTipText(tyUserFunctionsBundle.getString("RemoveButton_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("RemoveButton_toolTipText") : null);
    RemoveButton.setEnabled(false);
    getContentPane().add(RemoveButton);
    RemoveButton.setBounds(504,250,80,34);
    FinishButton.setText(tyUserFunctionsBundle.getString("FinishButton_text"));
    FinishButton.setActionCommand(tyUserFunctionsBundle.getString("FinishButton_actionCommand"));
    FinishButton.setToolTipText(tyUserFunctionsBundle.getString("FinishButton_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("FinishButton_toolTipText") : null);
    getContentPane().add(FinishButton);
    FinishButton.setBounds(504,350,80,34);
    FunctionLabel.setText(tyUserFunctionsBundle.getString("FunctionLabel_text"));
		FunctionLabel.setToolTipText(tyUserFunctionsBundle.getString("FunctionLabel_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("FunctionLabel_toolTipText") : null);
    getContentPane().add(FunctionLabel);
    FunctionLabel.setBounds(44,60,124,21);
    OALabel.setText(tyUserFunctionsBundle.getString("OALabel_text"));
		OALabel.setToolTipText(tyUserFunctionsBundle.getString("OALabel_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("OALabel_toolTipText") : null);
    getContentPane().add(OALabel);
    OALabel.setBounds(44,130,200,34);
		OAText.setText(tyUserFunctionsBundle.getString("OAText_text"));
//    OAText.setNextFocusableComponent(AddText);
		OAText.setToolTipText(tyUserFunctionsBundle.getString("OAText_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("OAText_toolTipText") : null);
    getContentPane().add(OAText);
    OAText.setBounds(44,105,200,34);
    AddLabel.setText(tyUserFunctionsBundle.getString("AddLabel_text"));
		AddLabel.setToolTipText(tyUserFunctionsBundle.getString("AddLabel_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("AddLabel_toolTipText") : null);
    getContentPane().add(AddLabel);
    AddLabel.setBounds(276,222,125,24);
		AddText.setText(tyUserFunctionsBundle.getString("AddText_text"));
		AddText.setToolTipText(tyUserFunctionsBundle.getString("AddText_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("AddText_toolTipText") : null);
    getContentPane().add(AddText);
    AddText.setBounds(276,190,200,34);
    ListLabel.setText(tyUserFunctionsBundle.getString("ListLabel_text"));
		ListLabel.setToolTipText(tyUserFunctionsBundle.getString("ListLabel_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("ListLabel_toolTipText") : null);
    getContentPane().add(ListLabel);
    ListLabel.setBounds(44,342,125,31);
    ListScrollPane.setOpaque(true);
    ListScrollPane.setToolTipText(tyUserFunctionsBundle.getString("ListScrollPane_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("ListScrollPane_toolTipText") : null);
    getContentPane().add(ListScrollPane);
    ListScrollPane.setBounds(44,190,200,160);
    TheList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		TheList.setToolTipText(tyUserFunctionsBundle.getString("TheList_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("TheList_toolTipText") : null);
    ListScrollPane.getViewport().add(TheList);
    TheList.setBounds(0,0,197,157);
    Msg.setText(tyUserFunctionsBundle.getString("Msg_text"));
		Msg.setToolTipText(tyUserFunctionsBundle.getString("Msg_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("Msg_toolTipText") : null);
    getContentPane().add(Msg);
    Msg.setForeground(new java.awt.Color(128,0,0));
    Msg.setBounds(20,380,450,30);
		JMenuBar1.setToolTipText(tyUserFunctionsBundle.getString("JMenuBar1_toolTipText").length() != 0 ? tyUserFunctionsBundle.getString("JMenuBar1_toolTipText") : null);
    ReadJavaFile.setMode(FileDialog.LOAD);
    ReadJavaFile.setTitle(tyUserFunctionsBundle.getString("ReadJavaFile_title"));
		ReadJavaFile.setDirectory(tyUserFunctionsBundle.getString("ReadJavaFile_directory"));
    ReadJavaFile.setFile(tyUserFunctionsBundle.getString("ReadJavaFile_file"));
		//$$ ReadJavaFile.move(0,451);
		SaveJavaFile.setMode(FileDialog.SAVE);
		SaveJavaFile.setTitle(tyUserFunctionsBundle.getString("SaveJavaFile_title"));
		SaveJavaFile.setDirectory(tyUserFunctionsBundle.getString("SaveJavaFile_directory"));
		SaveJavaFile.setFile(tyUserFunctionsBundle.getString("SaveJavaFile_file"));
		//$$ SaveJavaFile.move(24,451);
    //$$ OpenCfgFile.move(0,451);
    //$$ OpenFileDialog.move(0,451);
    //$$ SaveFileDialog.move(24,451);
    //}}

    Msg.setBorder(new javax.swing.border.EtchedBorder());

    //{{INIT_MENUS
    //}}

    //{{REGISTER_LISTENERS
    SymWindow aSymWindow = new SymWindow();
    this.addWindowListener(aSymWindow);
    
    SymAction lSymAction = new SymAction();
    exitItem.addActionListener(lSymAction);
    Help.addActionListener(lSymAction);
    about.addActionListener(lSymAction);
    AddButton.addActionListener(lSymAction);
    SymListSelection lSymListSelection = new SymListSelection();
    TheList.addListSelectionListener(lSymListSelection);
    RemoveButton.addActionListener(lSymAction);
    ImportButton.addActionListener(lSymAction);
    DeleteButton.addActionListener(lSymAction);
    FinishButton.addActionListener(lSymAction);
    //}}
  }
    /**
     * Creates a new instance of JFrame1 with the given title.
     * @param sTitle the title for the new frame.
     */
  public TyUserFunctions(String sTitle)
  {
    this();
    setTitle(sTitle);
  }
   void about_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.
       
    about_actionPerformed_Interaction1(event);
  }
  void about_actionPerformed_Interaction1(java.awt.event.ActionEvent event) { 
  
    try {
      // TymeacAbout Create with owner and show as modal
      {
        TyAbout TyAbout1 = new TyAbout(this);
        TyAbout1.setModal(true);
        TyAbout1.setVisible(true);
      }
    } catch (Exception e) {
    }
  }
  void AddButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.
       
    AddButton_actionPerformed_Interaction1(event);
  }
  void AddButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
  {
    try {
      // AddButton 

      // text field to string
      String addData = AddText.getText();

      int i;
      
      // When no data
      if  ((addData == null) ||
           (addData.length() < 1)) {
    
          // say so
          Msg.setText(tyUserFunctionsBundle.getString("Msg_text_1"));

          // done
          return;

      } // endif       

      // total number in list
      int len = TheList.getModel().getSize();

      // new array
      String[] data = new String[len + 1];

      // add the old list to the new array
      for  (i = 0; i < len; i++) {

          // each queue
          data[i] = (String) TheList.getModel().getElementAt(i);

      } // end-for

      // add the new queue name
      data[i] = addData;

      // kill the old list
      TheList.removeAll();

      // create a new list
      TheList.setListData(data);

      // ADD data null
      AddText.setText(tyUserFunctionsBundle.getString("AddText_text_1"));  

      // must first select something
      RemoveButton.setEnabled(false);

      // good message 
      Msg.setText(tyUserFunctionsBundle.getString("Msg_text_2"));
      
    } catch (java.lang.Exception e) {
    }
  }
    /**
     * Notifies this component that it has been added to a container
     * This method should be called by <code>Container.add</code>, and 
     * not by user code directly.
     * Overridden here to adjust the size of the frame if needed.
     * @see java.awt.Container#removeNotify
     */
  public void addNotify()
  {
    // Record the size of the window prior to calling parents addNotify.
    Dimension size = getSize();
    
    super.addNotify();
    
    if (frameSizeAdjusted)
      return;
    frameSizeAdjusted = true;
    
    // Adjust size of frame according to the insets and menu bar
    javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
    int menuBarHeight = 0;
    if (menuBar != null)
        menuBarHeight = menuBar.getPreferredSize().height;
    Insets insets = getInsets();
    setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
  }
  void DeleteButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.
       
    DeleteButton_actionPerformed_Interaction1(event);
	}
  void DeleteButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
  {
    try {
      // 
      // text field to string
      String deleteData = FunctionText.getText();
      
      // When no data
      if  ((deleteData == null) ||
           (deleteData.length() < 1)) {
    
          // say so
          Msg.setText(tyUserFunctionsBundle.getString("Msg_text_10"));

          // done
          return;

      } // endif

      try {
          SaveJavaFile.setVisible(true);
          ty_dir = SaveJavaFile.getDirectory();

      } // end-try 

      catch (java.lang.Exception e) {
    
        // say so
        Msg.setText(tyUserFunctionsBundle.getString("Msg_text_11"));

        // done
        return;
        
      } // end-catch

    // do the import function
    TyUserFuncMaintBean21.deleteButton(ty_dir, FunctionText);

    int why = TyUserFuncMaintBean21.getDelResult();

    // what came back
      switch (why) {

          case 0: Msg.setText(tyUserFunctionsBundle.getString("case_0__Msg_text_1") + deleteData + tyUserFunctionsBundle.getString("deleted"));

                  // no function or oa queue
                  FunctionText.setText(tyUserFunctionsBundle.getString("FunctionText_text_1"));
                  OAText.setText(tyUserFunctionsBundle.getString("OAText_text_1"));

                  // new array
                  Vector data = new Vector();

                  // new list
                  TheList.setListData(data);

                  // done
                  return;

          case 1: // say error
                  Msg.setText(tyUserFunctionsBundle.getString("Msg_text_12"));

                  // done
                  return; 


          case 2: // say error
                  Msg.setText(tyUserFunctionsBundle.getString("Msg_text_13"));

      } // end-switch

    } catch (java.lang.Exception e) {
    }
  }
  //{{DECLARE_MENUS
	//}}    

  void exitApplication()
  {    
    this.setVisible(false);    // hide the Frame
    this.dispose();            // free the system resources
    System.exit(0);            // close the application     
  }
  void exitItem_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.
       
    exitItem_actionPerformed_Interaction1(event);
  }
  void exitItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
    try {
      this.exitApplication();
    } catch (Exception e) {
    }
  }
  void FinishButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.
       
    FinishButton_actionPerformed_Interaction1(event);
	}
  void FinishButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
  {
    try {
      // 
      // text field to string
      String finishData = FunctionText.getText();

      
      // When no data
      if  ((finishData == null) ||
           (finishData.length() < 1)) {
    
          // say so
          Msg.setText(tyUserFunctionsBundle.getString("Msg_text_14"));

          // done
          return;

      } // endif

      try {
          SaveJavaFile.setVisible(true);
          ty_dir = SaveJavaFile.getDirectory();

      } // end-try 

      catch (java.lang.Exception e) {
    
        // say so
        Msg.setText(tyUserFunctionsBundle.getString("Msg_text_15"));

        // done
        return;
        
      } // end-catch

    // do the import function
    TyUserFuncMaintBean21.finishButton( ty_dir,
                                       FunctionText,
                                       OAText,
                                       TheList);

    int why = TyUserFuncMaintBean21.getUpdResult();

    // what came back
      switch (why) {

          case 0: Msg.setText(
                  finishData
                  + " "
                  + tyUserFunctionsBundle.getString("case_0__Msg_text_2"));
                  return;

          case 1: // say error
                  Msg.setText(tyUserFunctionsBundle.getString("Msg_text_16"));

                  // done
                  return; 

          case 2: // say error
                  Msg.setText(tyUserFunctionsBundle.getString("Msg_text_17"));

                  // done
                  return; 

          case 3: // say error
                  Msg.setText(tyUserFunctionsBundle.getString("Msg_text_18"));

                  // done
                  return;  


          case 4: // say error
                  Msg.setText(tyUserFunctionsBundle.getString("Msg_text_19"));

                  // done
                  return;

      } // end-switch

    } catch (java.lang.Exception e) {
    }
  }
  void Help_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.
       
    Help_actionPerformed_Interaction1(event);
  }
  void Help_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
    
    TyHelp th = new TyHelp();

    th.putOut(tyUserFunctionsBundle.getString("th_putOut"));    
  }
  void ImportButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.
       
    ImportButton_actionPerformed_Interaction1(event);
	}
  void ImportButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
  {
    try {
      // ImportButton 

      // text field to string
      String importData = FunctionText.getText();
      
      // When no data
      if  ((importData == null) ||
           (importData.length() < 1)) {
    
          // say so
          Msg.setText(tyUserFunctionsBundle.getString("Msg_text_5"));

          // done
          return;

      } // endif
      
      try {
          ReadJavaFile.setVisible(true);
          ty_dir = ReadJavaFile.getDirectory();

      } // end-try 

      catch (java.lang.Exception e) {
    
        // say so
        Msg.setText(tyUserFunctionsBundle.getString("Msg_text_6"));

        // done
        return;
        
      } // end-catch
             

    // do the import function
    TyUserFuncMaintBean21.importButton( ty_dir,
                                    FunctionText,
                                    OAText,
                                    TheList);

    int why = TyUserFuncMaintBean21.getImpResult();

    // what came back
      switch (why) {

          case 0: Msg.setText(tyUserFunctionsBundle.getString("case_0__Msg_text"));
                  return;

          case 1: // say error
                  Msg.setText(tyUserFunctionsBundle.getString("Msg_text_7"));

                  // done
                  return;

          case 2: // say error
                  Msg.setText(tyUserFunctionsBundle.getString("Msg_text_8"));

                  // done
                  return; 

          case 3: // say error
                  Msg.setText(tyUserFunctionsBundle.getString("Msg_text_9"));

                  // done
                  return; 

      } // end-switch


    } catch (java.lang.Exception e) {
    }
  }
  /**
   * The entry point for this application.
   * Sets the Look and Feel to the System Look and Feel.
   * Creates a new JFrame1 and makes it visible.
   */
  static public void main(String args[])
  {
    try {
        // Add the following code if you want the Look and Feel
        // to be set to the Look and Feel of the native system.
        
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } 
        catch (Exception e) { 
        }        

      //Create a new instance of our application's frame, and make it visible.
      (new TyUserFunctions()).setVisible(true);
    } 
    catch (Throwable t) {
      t.printStackTrace();
      //Ensure the application exits with an error condition.
      System.exit(1);
    }
  }
  void RemoveButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.
       
    RemoveButton_actionPerformed_Interaction1(event);
  }
  void RemoveButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
  {
    try {
        // index selected
        int the_index = TheList.getSelectedIndex(); 

        // When something selected
        if  (the_index == -1) {

          // nothing selected
          RemoveButton.setEnabled(false);

        } // endif

        // total number in list
        int len = TheList.getModel().getSize();

        // When only one,
        if  (len == 1) {

            // kill the old list
            TheList.removeAll();

            // new array
            String[] data = new String[1];
            data[0] = null; 

            // create a new list
            TheList.setListData(data);

            // must first select something
            RemoveButton.setEnabled(false);

            // good message 
            Msg.setText(tyUserFunctionsBundle.getString("Msg_text_3"));

            // done
            return;

        } // endif

        // new array
        String[] data = new String[len - 1];

        // add the old list to the new array without the selected one
        for  (int i = 0, j = 0; i < len; i++) {

              // When it's not the one to skip
              if  (i != the_index) {

                  // each queue
                  data[j] = (String) TheList.getModel().getElementAt(i);

                  // bump new
                  j++;

              } // endif
        } // end-for

        // kill the old list
        TheList.removeAll();

        // create a new list
        TheList.setListData(data);

        // must first select something
        RemoveButton.setEnabled(false);

        // good message 
        Msg.setText(tyUserFunctionsBundle.getString("Msg_text_4"));

    } catch (java.lang.Exception e) {
    }
  }
  void TheList_valueChanged(javax.swing.event.ListSelectionEvent event)
  {
    // to do: code goes here.
       
    TheList_valueChanged_Interaction1(event);
  }
  void TheList_valueChanged_Interaction1(javax.swing.event.ListSelectionEvent event)
  {
    try {
      // When something selected
      if  (TheList.getSelectedIndex() == -1) {

          // nothing selected
          RemoveButton.setEnabled(false);
      } 
      else {
          RemoveButton.setEnabled(true);

      } // endif

      //RemoveButton.setEnabled(!RemoveButton.isEnabled());
    } catch (java.lang.Exception e) {
    }
  }
  void TyUserFunctions_windowClosing(java.awt.event.WindowEvent event)
  {
    // to do: code goes here.
       
    TyUserFunctions_windowClosing_Interaction1(event);
  }
  void TyUserFunctions_windowClosing_Interaction1(java.awt.event.WindowEvent event) {
    try {
      this.exitApplication();
    } catch (Exception e) {
    }
  }
}
