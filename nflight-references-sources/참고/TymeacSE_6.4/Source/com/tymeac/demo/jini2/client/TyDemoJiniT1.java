package com.tymeac.demo.jini2.client;

/* 
 * Copyright (c) 2002 Cooperative Software Systems, Inc. 
 *
 * The contents of this file are subject to the Common Public License   
 * ("License"). You may not use this file except in compliance with
 * the License. A copy of the License is part of this distribution and
 * is also available at:
 * http://www.opensource.org/licenses/cpl.php
 */

import java.awt.*;
import javax.swing.*;

/**
 * The Jini Single Function Test display frame.
 */
public class TyDemoJiniT1 extends javax.swing.JFrame
{
  private static final long serialVersionUID = 1L;

  // Used by addNotify
  boolean frameSizeAdjusted = false;

  //{{DECLARE_CONTROLS
	javax.swing.JTextField DocText = new javax.swing.JTextField();
	javax.swing.JTextField ResultText = new javax.swing.JTextField();
	javax.swing.JLabel DocLabel = new javax.swing.JLabel();
	javax.swing.JLabel ResultLabel = new javax.swing.JLabel();
	javax.swing.JButton NoWaitButton = new javax.swing.JButton();
	javax.swing.JButton WaitButton = new javax.swing.JButton();
	//}}

  TyDemoJiniT1Bean2 TyDemoJiniT1Bean21 = null;  

  class SymWindow extends java.awt.event.WindowAdapter
  {
    public void windowClosing(java.awt.event.WindowEvent event)
    {
      Object object = event.getSource();
      if (object == TyDemoJiniT1.this)
        TyDemoJiniT1_windowClosing(event);
    }
  }

  class SymAction implements java.awt.event.ActionListener
  {
    public void actionPerformed(java.awt.event.ActionEvent event)
    { 
      Object object = event.getSource();
      if (object == WaitButton)
        WaitButton_actionPerformed(event);
      else if (object == NoWaitButton)
        NoWaitButton_actionPerformed(event);
      
      
          
      
    }
  }

	static java.util.ResourceBundle tyDemoJiniT1Bundle = java.util.ResourceBundle.getBundle("com.tymeac.demo.jini.client.TyDemoJiniT1Bundle");
  public TyDemoJiniT1()
  {
    // This code is automatically generated by Visual Cafe when you add
    // components to the visual environment. It instantiates and initializes
    // the components. To modify the code, only use code syntax that matches
    // what Visual Cafe can generate, or Visual Cafe may be unable to back
    // parse your Java file into its visual environment.
    //{{INIT_CONTROLS
    setTitle(tyDemoJiniT1Bundle.getString("TyDemoJiniT1_title"));
    setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
    getContentPane().setLayout(null);
    setSize(630,280);
    setVisible(false);
		DocText.setText(tyDemoJiniT1Bundle.getString("DocText_text"));
		DocText.setToolTipText(tyDemoJiniT1Bundle.getString("DocText_toolTipText").length() != 0 ? tyDemoJiniT1Bundle.getString("DocText_toolTipText") : null);
    getContentPane().add(DocText);
    DocText.setBounds(33,43,277,23);
		ResultText.setText(tyDemoJiniT1Bundle.getString("ResultText_text"));
		ResultText.setToolTipText(tyDemoJiniT1Bundle.getString("ResultText_toolTipText").length() != 0 ? tyDemoJiniT1Bundle.getString("ResultText_toolTipText") : null);
    getContentPane().add(ResultText);
    ResultText.setBounds(33,197,535,23);
    DocLabel.setText(tyDemoJiniT1Bundle.getString("DocLabel_text"));
		DocLabel.setToolTipText(tyDemoJiniT1Bundle.getString("DocLabel_toolTipText").length() != 0 ? tyDemoJiniT1Bundle.getString("DocLabel_toolTipText") : null);
    getContentPane().add(DocLabel);
    DocLabel.setBounds(33,67,146,23);
    ResultLabel.setText(tyDemoJiniT1Bundle.getString("ResultLabel_text"));
		ResultLabel.setToolTipText(tyDemoJiniT1Bundle.getString("ResultLabel_toolTipText").length() != 0 ? tyDemoJiniT1Bundle.getString("ResultLabel_toolTipText") : null);
    getContentPane().add(ResultLabel);
    ResultLabel.setBounds(33,220,144,23);
    NoWaitButton.setText(tyDemoJiniT1Bundle.getString("NoWaitButton_text"));
		NoWaitButton.setActionCommand(tyDemoJiniT1Bundle.getString("NoWaitButton_actionCommand"));
		NoWaitButton.setToolTipText(tyDemoJiniT1Bundle.getString("NoWaitButton_toolTipText").length() != 0 ? tyDemoJiniT1Bundle.getString("NoWaitButton_toolTipText") : null);
    getContentPane().add(NoWaitButton);
    NoWaitButton.setBounds(414,126,120,23);
    WaitButton.setText(tyDemoJiniT1Bundle.getString("WaitButton_text"));
		WaitButton.setActionCommand(tyDemoJiniT1Bundle.getString("WaitButton_actionCommand"));
		WaitButton.setToolTipText(tyDemoJiniT1Bundle.getString("WaitButton_toolTipText").length() != 0 ? tyDemoJiniT1Bundle.getString("WaitButton_toolTipText") : null);
    getContentPane().add(WaitButton);
    WaitButton.setBounds(150,126,120,23);   
    

    //}}

    //{{INIT_MENUS
    //}}

    //{{REGISTER_LISTENERS
    SymWindow aSymWindow = new SymWindow();
    this.addWindowListener(aSymWindow);
    
    SymAction lSymAction = new SymAction();
    WaitButton.addActionListener(lSymAction);
    NoWaitButton.addActionListener(lSymAction);
    //}}
  }
    /**
     * Creates a new instance of JFrame1 with the given title.
     * @param sTitle the title for the new frame.
     */
  public TyDemoJiniT1(String sTitle)
  {
    this();
    setTitle(sTitle);
  }
    /**
     * Notifies this component that it has been added to a container
     * This method should be called by <code>Container.add</code>, and 
     * not by user code directly.
     * Overridden here to adjust the size of the frame if needed.
     * @see java.awt.Container#removeNotify
     */
  public void addNotify()
  {
    // Record the size of the window prior to calling parents addNotify.
    Dimension size = getSize();
    
    super.addNotify();
    
    if (frameSizeAdjusted)
      return;
    frameSizeAdjusted = true;
    
    // Adjust size of frame according to the insets and menu bar
    javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
    int menuBarHeight = 0;
    if (menuBar != null)
        menuBarHeight = menuBar.getPreferredSize().height;
    Insets insets = getInsets();
    setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
  }
  //{{DECLARE_MENUS
	//}}

  void exitApplication()
  {    
    this.setVisible(false);    // hide the Frame
    this.dispose();            // free the system resources
    System.exit(0);            // close the application 
    
  }
  /**
   * The entry point for this application.
   * Sets the Look and Feel to the System Look and Feel.
   * Creates a new JFrame1 and makes it visible.
   */
  static public void main(String args[])
  {
    try {
        // Add the following code if you want the Look and Feel
        // to be set to the Look and Feel of the native system.
        
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } 
        catch (Exception e) { 
        }
        

      //Create a new instance of our application's frame, and make it visible.
      (new TyDemoJiniT1()).setVisible(true);
    } 
    catch (Throwable t) {
      t.printStackTrace();
      //Ensure the application exits with an error condition.
      System.exit(1);
    }
  }
  void NoWaitButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.
       
    NoWaitButton_actionPerformed_Interaction1(event);
  }
  void NoWaitButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
  {
    try {
    // When 1st time 
      if  (TyDemoJiniT1Bean21 == null) {

          // get new obj
          TyDemoJiniT1Bean21 = new TyDemoJiniT1Bean2();

      } // endif

    // do the function
    TyDemoJiniT1Bean21.sendNoWait(DocText, ResultText);

    } catch (java.lang.Exception e) {
    }
  }
  void TyDemoJiniT1_windowClosing(java.awt.event.WindowEvent event)
  {
    // to do: code goes here.
       
    TyDemoJiniT1_windowClosing_Interaction1(event);
  }
  void TyDemoJiniT1_windowClosing_Interaction1(java.awt.event.WindowEvent event) {
    try {
      this.exitApplication();
    } catch (Exception e) {
    }
  }
  void WaitButton_actionPerformed(java.awt.event.ActionEvent event)
  {
    // to do: code goes here.
       
    WaitButton_actionPerformed_Interaction1(event);
  }
  void WaitButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
  {
    try {
      // When 1st time 
      if  (TyDemoJiniT1Bean21 == null) {

          // get new obj
          TyDemoJiniT1Bean21 = new TyDemoJiniT1Bean2();

      } // endif

    // do the function
    TyDemoJiniT1Bean21.sendWait(DocText, ResultText);

    } catch (java.lang.Exception e) {
    }
  }
}
