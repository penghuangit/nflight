package com.abreqadhabra.nflight.examples.dao;

import com.abreqadhabra.nflight.app.dao.AirlineDAO;
import com.abreqadhabra.nflight.app.dao.DAOFactory;
import com.abreqadhabra.nflight.app.dao.dto.Airline;
import com.abreqadhabra.nflight.app.dao.exception.DAORuntimeException;

/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */



public class AirlineDAOExample {

	
	String componentName = AirlineDAOExample.class.getSimpleName();

	//Logger logger = CustomLogger.getLogger(AirlineDAOExample.class);
	
	
	String resourceBundleName = "com.abreqadhabra.nflight.commons.resources.logging.LoggingMessages";

	
/*	
	String resourceBundleName = "com.ibm.websphere.componentX.Messages";
	Logger logger = Logger.getLogger(componentName, resourceBundleName);*/
	
    private AirlineDAO airlineDAO = null;


    public AirlineDAOExample (){
	try {
	    this.airlineDAO = this.getAirlineDAO();
	} catch (Exception e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
/*	    
	    if (logger.isLoggable(Level.FINEST)) {
 	String s = dumpComponentState();	// some expensive to compute method
 	logger.logp(Level.FINEST, className, methodName, "componentX statedump:\n{0}", s);
 }
	    */
	}
	    
    }
    
    public static void main(String[] arg) {

	AirlineDAOExample airlineDAOExample = new AirlineDAOExample();
	System.out.println("-> "+airlineDAOExample.componentName);

	airlineDAOExample.excute();

    }

    private void excute() {
	try {

	    Airline airline = new Airline();
	    Airline[] airlines = null;

	    airlineDAO.setAutoCommit(true);

	    airline.setAirlineCode("C1");
	    airline.setAirlineName("N1");
	    System.out.println(airline.toString());

	    this.insert(airline);

	    airline.setAirlineCode("C2");
	    airline.setAirlineName("N2");
	    System.out.println(airline.toString());

	    this.insert(airline);

	    airline.setAirlineName("U1");
	    System.out.println(airline.toString());

	    this.update(airline);

	    airlines =  this.findAll();

	    for (int i = 0; i < airlines.length; i++) {
		System.out.println(airlines[i]);
	    }

	    String airlineCode = "C1";
	    airline =  this.findByPrimaryKey(airlineCode);
	    System.out.println(airline.toString());

	    String airlineName = "N";
	    airlines =  this.findByAirlineNameLIKE(airlineName);

	    for (int i = 0; i < airlines.length; i++) {
		System.out.println(airlines[i]);
	    }

	    this.delete(airlineCode);

	    airlines =  this.findAll();

	    for (int i = 0; i < airlines.length; i++) {
		System.out.println(airlines[i]);
	    }

	    this.deleteAll();

	    this.airlineDAO.commit();
	    this.airlineDAO.setAutoCommit(false);

	} catch (DAORuntimeException e) {
	    this.airlineDAO.rollback();
	    e.printStackTrace();
	}
    }

    private AirlineDAO getAirlineDAO() throws DAORuntimeException {
	DAOFactory daoFactory = DAOFactory
		.getDAOFactory(DAOFactory.DATABASE_TYPE_DERBY);
	return daoFactory.getAirlineDAO();
    }

    private void insert(Airline airline) throws DAORuntimeException {
	airlineDAO.insert(airline);
    }

    private void update(Airline airline) throws DAORuntimeException {
	airlineDAO.updateByPrimaryKey(airline);
    }

    private Airline findByPrimaryKey(String airlineCode)
	    throws DAORuntimeException {
	return airlineDAO.findByPrimaryKey(airlineCode);
    }

    private Airline[] findByAirlineNameLIKE(String airlineName)
	    throws DAORuntimeException {
	return airlineDAO.matchByAirlineName(airlineName);
    }

    private void delete(String airlineCode) throws DAORuntimeException {
	airlineDAO.deleteByPrimaryKey(airlineCode);
    }

    private void deleteAll() throws DAORuntimeException {
	airlineDAO.deleteAll();
    }

    private Airline[] findAll() throws DAORuntimeException {
	return airlineDAO.findAll();
    }


}
